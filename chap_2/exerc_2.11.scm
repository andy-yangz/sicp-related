;mul-interval into 9 cases
; neg-pair oppo-pair pos-pair 3*3=9 case
; only oppo-pair and oppo-pair need more than 2 multiplications
; neg-pair neg-pair: (x2y2, x1y1)
; neg-pair oppo-pair: (x1y2, x1y1)
; neg-pair pos-pair: (x1y2, x2y1)
; oppo-pair neg-pair: (x2y1, x1y1)
; oppo-pair oppo-pair: (min, max)
; oppo-pair pos-pair: (x1y2, x2y2)
; pos-pair neg-pair: (x2y1, x1y2)
; pos-pair oppo-pair: (x2y1, x2y2)
; pos-pair pos-pair: (x1y1, x2y2)
(load "exerc_2.7.scm")
(define old-mul-interval mul-interval)

(define (neg-pair? x)
    (and (< (lower-bound x) 0) (< (upper-bound x) 0)))
(define (oppo-pair? x)
    (or (and (< (lower-bound x) 0) (>= (upper-bound x) 0))
        (and (< (upper-bound x) 0) (>= (lower-bound x) 0))))
(define (pos-pair x)
    (and (>= (lower-bound x) 0) (>= (upper-bound x) 0)))
(define (mul-interval x y)
    (let ((x1 (lower-bound x))
          (x2 (upper-bound x))
          (y1 (lower-bound y))
          (y2 (upper-bound y)))
         (cond ((neg-pair? x) 
                            (cond ((neg-pair? y) (make-interval (* x2 y2) (* x1 y1)))
                                  ((oppo-pair? y) (make-interval (* x1 y2) (* x1 y1)))
                                  (else (make-interval (* x1 y2) (* x2 y1)))))
               ((oppo-pair? x)
                            (cond ((neg-pair? y) (make-interval (* x2 y1) (* x1 y1)))
                                  ((oppo-pair? y) (old-mul-interval x y))
                                  (else (make-interval (* x1 y2) (* x2 y2)))))
               (else 
                            (cond ((neg-pair? y) (make-interval (* x2 y1) (* x1 y2)))
                                  ((oppo-pair? y) (make-interval (* x2 y1) (* x2 y2)))
                                  (else (make-interval (* x1 y1) (* x2 y2))))))))

(define neg-int (make-interval -3 -1))
(define pos-int (make-interval 1 3))
(define oppo-int (make-interval -3 2))
(define pos0-int (make-interval 0 5))
(define oppo0-int (make-interval -2 0))